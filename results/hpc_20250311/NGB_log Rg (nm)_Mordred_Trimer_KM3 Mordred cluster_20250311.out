


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03237198429940487), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06788784528681167), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05202936012775939), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 576), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004866083656078861), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1446), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 9.590941089616503e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0621569244928673), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1298), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06690878074110478), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 236), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.0882871925854953e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03156966038149249), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06324891054810594), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 487), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09802839489310182), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.038974921879261e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06672421358776096), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06705170092047213), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023850382824279384), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09896091003071157), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1934), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3940963366364436e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1207), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03698489381369788), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 604), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 490), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 448), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017215014038960988), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1879), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007470394357331939), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03870513535793773), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 195), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06597933535314547), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07264109164006564), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 318), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009422015710167528), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09984160850557258), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1016), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6680932085388465e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1315), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03846825718717571), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 519), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04794765284357155), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 681), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012135470109781173), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05839859887854655), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.046267302572665155), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 205), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06320909862056831), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 333), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0814282571946158e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023777822409828325), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1014), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1070), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1326), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 646), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.813756417489015e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03203000181269244), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027125777901728407), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025971147282494663), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 388), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06696665658897816), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 328), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005945456154149235), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09957644471024361), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1745), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.741373119085552e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047892211886987106), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06615845362149422), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 253), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4368431157669114e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04360396284165189), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 102), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038245742060045045), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0992849331487508), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 275), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0595770537512154e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016157050452579525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1962), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.694718500573707e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 503), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4492640727539615e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059307633769785935), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 461), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006369854654195981), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06710350955794765), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1311), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00041153848328513384), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03693499023328491), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6980259507827906e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025110050741759458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2881294633636083e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018596608299181056), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 179), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00014862745018686505), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006847763747456636), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1482), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03286389630510646), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08829912602233878), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 209), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009689950692351167), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05289561759215815), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1090), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0345764858269042e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09998712522217162), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 245), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 9.814110356887233e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030230719135013535), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.8760987230369905e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0600511254861591), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1411), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09802839489310182), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.038974921879261e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.053446116841040406), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01738423626319311), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1727263662434467e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09954605241346837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1468), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00048442009922385705), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0407317605920897), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1662), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09901740543431413), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 402), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006003854852004248), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09824891037572928), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1512), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007222591914768074), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09961345446146942), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1445), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5182217034478748e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0736439347566004e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05197155250939099), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06057539605408772), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 968), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 599), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09701762666231041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003180614538446503), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1240), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05232945838022956), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 288), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09925529857310478), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1341), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000889955944871127), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09789793478849139), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 338), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.8059922732833264e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015550790441708956), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4144081237995499e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 678), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09805399184227677), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 271), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006221783918127036), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048400449689015135), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 730), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05811448969757228), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1043), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3592426227629034e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05939020987154606), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1448), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1380), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0996044968778107), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1192), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.7795032281921703e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03339093659720527), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 485), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023856180188117488), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 935), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1430), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 566), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06529933363683309), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 979), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0984517089521891), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 992), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2069274837114224e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06451280552636807), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 221), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0782080126695916e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 827), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059825630356352875), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 373), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03445513415612125), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 379), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016514366626174826), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07804434838532388), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09950781581359784), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1177), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.377441416997496e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057007993575322276), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 710), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057929676001226026), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09988418516049129), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 239), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6539503939240421e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0758190681240728), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1493), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.409183930128859e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05637136869456241), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 440), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03618748855998037), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 556), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1487), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04750100297244296), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 680), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02184002915033903), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024788560679862345), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025968078662527986), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1315), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0700127499181433), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 490), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06517698027713494), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 311), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007819308747723227), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09872214750903409), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1954), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.741516668942424e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.052220183182120176), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06731051507688472), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 860), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0966614643691989), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 678), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3219414454259747e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04419587909781461), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 873), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0994401163444142), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 333), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002719844164722201), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 148), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001709626313980425), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012632818843253556), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1976), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004858539754558233), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09820359045643907), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.754013281195407e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04592792337071767), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1067), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09820359045643907), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.754013281195407e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1322), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09319337748035546), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002773193651105463), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 125), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06776573778967063), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 302), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031964080936634644), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 746), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017935409173082804), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 397), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030265920255377297), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 394), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04449103863041631), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 255), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09925529857310478), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1341), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000889955944871127), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03760773917637089), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05670614706462086), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1813), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008544955982240737), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09323742942938647), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1893), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1696110819214866e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09740524916085616), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1881), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1627812615084256e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036873398202361234), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 703), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09804697500837978), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1972), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003818371276154087), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05588603215554048), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1124), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0681730253444973), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 691), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4905246453347918e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 470), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09205988756757671), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1250), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0071951532565228e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03230554365491964), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000866339891284522), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 244), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09995810551770351), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 774), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006150194876932741), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 563), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09813936800903357), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1014), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5929724106265351e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05435575589190798), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 488), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06629909464883918), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1360), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 389), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06051294539184799), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 319), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07413783475918857), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1193), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05676338205488912), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 281), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1551201416438955e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1347), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 930), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09816959856484282), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 407), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006714756678723694), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05506470414148385), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0993936020782067), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 970), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3348896929669792e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03248407931768997), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 854), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050759581824957975), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1960), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003428334844242966), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01991222995825114), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1318), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.612331531206991e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06074072972546597), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1987), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006421674311017409), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06210692271569811), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1335), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 264), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0057698486514932085), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05803047808597792), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1032), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3595579460845381e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013646812592765904), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1371520179986641e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0583675162648701), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1359), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06604091019774246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 387), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054564837612564525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05975700750594326), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 64, 6: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5859243600225645, 'test_rmse': 0.718040739609659, 'test_r2': -0.3627784955750386, 'test_pearson_r': array([0.29383795]), 'test_pearson_p_value': array([0.00012184]), 'test_spearman_r': 0.37586421538860865, 'test_spearman_p_value': 6.028867455376442e-07, 'test_kendall_r': 0.2556066374221784, 'test_kendall_p_value': 1.313873488010107e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 576, 'regressor__learning_rate': 0.05202936012775939, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.567183468344624, 'test_rmse': 0.698448791036284, 'test_r2': -0.28942545817603427, 'test_pearson_r': array([0.28460977]), 'test_pearson_p_value': array([0.00020209]), 'test_spearman_r': 0.3501908966278498, 'test_spearman_p_value': 3.7440291216030584e-06, 'test_kendall_r': 0.23244239980935394, 'test_kendall_p_value': 1.0987760422312796e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06705170092047213, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5536625006555274, 'test_rmse': 0.6812307567345561, 'test_r2': -0.2266356876653013, 'test_pearson_r': array([0.26107464]), 'test_pearson_p_value': array([0.00068027]), 'test_spearman_r': 0.3279922005851212, 'test_spearman_p_value': 1.6039967305076448e-05, 'test_kendall_r': 0.20898689375136276, 'test_kendall_p_value': 7.829409259256775e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 448, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5779307516392309, 'test_rmse': 0.7130615475035552, 'test_r2': -0.3439438844027076, 'test_pearson_r': array([0.31056311]), 'test_pearson_p_value': array([4.65616031e-05]), 'test_spearman_r': 0.3556408175748812, 'test_spearman_p_value': 2.5745113076196958e-06, 'test_kendall_r': 0.23541175179631002, 'test_kendall_p_value': 8.195161211478117e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.012135470109781173, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5757857545434614, 'test_rmse': 0.7182824927446726, 'test_r2': -0.36369630264866326, 'test_pearson_r': array([0.31511672]), 'test_pearson_p_value': array([3.54698007e-05]), 'test_spearman_r': 0.395860772269509, 'test_spearman_p_value': 1.2986864574470596e-07, 'test_kendall_r': 0.27785855858184527, 'test_kendall_p_value': 1.4396555555738366e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03203000181269244, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.6124458842410008, 'test_rmse': 0.7435128306604084, 'test_r2': -0.46118106470617026, 'test_pearson_r': array([0.24488308]), 'test_pearson_p_value': array([0.00147369]), 'test_spearman_r': 0.30245957458311806, 'test_spearman_p_value': 7.474776318142532e-05, 'test_kendall_r': 0.18800327495477143, 'test_kendall_p_value': 0.0003690153012719997, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5463830174954776, 'test_rmse': 0.6937488360523462, 'test_r2': -0.27213041350153344, 'test_pearson_r': array([0.32427294]), 'test_pearson_p_value': array([2.02477133e-05]), 'test_spearman_r': 0.40155778755942917, 'test_spearman_p_value': 8.228938935051852e-08, 'test_kendall_r': 0.2696754650757767, 'test_kendall_p_value': 3.420703074496761e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 179, 'regressor__learning_rate': 0.018596608299181056, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([47.85190535, 45.77102566]), 'score_time': array([1.19357681, 1.21349525]), 'test_pearson_r': array([0.89885702, 0.88658301]), 'test_pearson_p': array([-1.07745344e-47, -2.38799889e-44]), 'test_spearman_r': array([0.89737185, 0.87966749]), 'test_spearman_p': array([-2.60929296e-47, -8.17239627e-43]), 'test_kendall_r': array([0.77063868, 0.764511  ]), 'test_kendall_p': array([-1.70974453e-38, -1.46982366e-37]), 'test_rmse': array([-0.29386337, -0.28418668]), 'test_mae': array([-0.16311648, -0.14306817]), 'test_r2': array([0.79983411, 0.77467247]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06324891054810594, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([26.46511889, 25.58129025]), 'score_time': array([0.72851682, 0.72347045]), 'test_pearson_r': array([0.89573026, 0.79319305]), 'test_pearson_p': array([-6.82841591e-47, -3.90431892e-29]), 'test_spearman_r': array([0.88297668, 0.80836165]), 'test_spearman_p': array([-7.24619387e-44, -5.18871602e-31]), 'test_kendall_r': array([0.7660295 , 0.68456731]), 'test_kendall_p': array([-5.11461725e-38, -1.77232286e-30]), 'test_rmse': array([-0.3038589 , -0.38265367]), 'test_mae': array([-0.1481883 , -0.20177598]), 'test_r2': array([0.78662609, 0.58487132]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1207, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([26.21608543, 28.93155956]), 'score_time': array([0.74426913, 0.74968481]), 'test_pearson_r': array([0.77716219, 0.88248185]), 'test_pearson_p': array([-1.61670941e-27, -1.99340660e-43]), 'test_spearman_r': array([0.84944786, 0.89056676]), 'test_spearman_p': array([-2.39733193e-37, -2.80681370e-45]), 'test_kendall_r': array([0.73855939, 0.7776124 ]), 'test_kendall_p': array([-1.57088916e-35, -8.64900154e-39]), 'test_rmse': array([-0.40701532, -0.29766073]), 'test_mae': array([-0.18538002, -0.15590671]), 'test_r2': array([0.58150645, 0.77284528]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1315, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([24.4942584 , 24.84488463]), 'score_time': array([0.64579248, 0.61535025]), 'test_pearson_r': array([0.90932866, 0.86999239]), 'test_pearson_p': array([-1.38839969e-50, -8.08052061e-41]), 'test_spearman_r': array([0.90635139, 0.87793908]), 'test_spearman_p': array([-9.96649857e-50, -1.91036006e-42]), 'test_kendall_r': array([0.78063396, 0.75452648]), 'test_kendall_p': array([-2.30491894e-39, -1.13644905e-36]), 'test_rmse': array([-0.26643746, -0.32104461]), 'test_mae': array([-0.14600814, -0.15736907]), 'test_r2': array([0.82028236, 0.73893441]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1070, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([37.74343848, 40.70688152]), 'score_time': array([1.05250907, 0.99499011]), 'test_pearson_r': array([0.91617933, 0.85755654]), 'test_pearson_p': array([-1.13567747e-52, -1.77352503e-38]), 'test_spearman_r': array([0.88835368, 0.86469321]), 'test_spearman_p': array([-4.25980947e-45, -8.58135692e-40]), 'test_kendall_r': array([0.75134674, 0.75545446]), 'test_kendall_p': array([-1.19677331e-36, -9.93083647e-37]), 'test_rmse': array([-0.25355462, -0.32792468]), 'test_mae': array([-0.14823213, -0.15864415]), 'test_r2': array([0.83722646, 0.72714179]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1745, 'regressor__learning_rate': 0.09957644471024361, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([27.07751608, 26.9271419 ]), 'score_time': array([0.75757146, 0.78806806]), 'test_pearson_r': array([0.92481651, 0.89818845]), 'test_pearson_p': array([-1.42437022e-55, -3.67006512e-47]), 'test_spearman_r': array([0.91355199, 0.90523851]), 'test_spearman_p': array([-7.51953087e-52, -4.83715960e-49]), 'test_kendall_r': array([0.77547435, 0.78310811]), 'test_kendall_p': array([-5.66311738e-39, -2.52499553e-39]), 'test_rmse': array([-0.24170948, -0.28588588]), 'test_mae': array([-0.14206711, -0.1476281 ]), 'test_r2': array([0.84677574, 0.80034027]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1311, 'regressor__learning_rate': 0.06710350955794765, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([4.41734719, 4.43333817]), 'score_time': array([0.16392398, 0.1614089 ]), 'test_pearson_r': array([0.87819823, 0.92278212]), 'test_pearson_p': array([-8.02029747e-43, -1.91930327e-54]), 'test_spearman_r': array([0.87357449, 0.91808116]), 'test_spearman_p': array([-7.47343457e-42, -7.04045809e-53]), 'test_kendall_r': array([0.7479675 , 0.78615443]), 'test_kendall_p': array([-3.07285474e-36, -1.17348853e-39]), 'test_rmse': array([-0.31054668, -0.2458909 ]), 'test_mae': array([-0.15102829, -0.1438482 ]), 'test_r2': array([0.74878093, 0.84509166]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 245, 'regressor__learning_rate': 0.09998712522217162, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.3072284810590452, 'test_rmse': 0.4673118015843162, 'test_r2': -0.549535501870986, 'test_pearson_r': array([0.24730343]), 'test_pearson_p_value': array([0.30736992]), 'test_spearman_r': 0.3177436059780934, 'test_spearman_p_value': 0.18495516463626507, 'test_kendall_r': 0.27715369768804643, 'test_kendall_p_value': 0.1048323872354933, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.053446116841040406, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.28160398411271464, 'test_rmse': 0.379907795427632, 'test_r2': -0.024104897867809116, 'test_pearson_r': array([0.51660678]), 'test_pearson_p_value': array([0.02353248]), 'test_spearman_r': 0.5488128771702383, 'test_spearman_p_value': 0.014958218812256063, 'test_kendall_r': 0.4523889667122646, 'test_kendall_p_value': 0.00761581289191135, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 968, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.35954055481320707, 'test_rmse': 0.45144647693848994, 'test_r2': -0.446107469719204, 'test_pearson_r': array([0.13289986]), 'test_pearson_p_value': array([0.58755333]), 'test_spearman_r': 0.10591453532603114, 'test_spearman_p_value': 0.6660715672441226, 'test_kendall_r': 0.09640128615236399, 'test_kendall_p_value': 0.5726678775679765, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1341, 'regressor__learning_rate': 0.09925529857310478, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.28117509181997324, 'test_rmse': 0.42734699815184835, 'test_r2': -0.2958339333515323, 'test_pearson_r': array([0.46417177]), 'test_pearson_p_value': array([0.04528385]), 'test_spearman_r': 0.40335785536663515, 'test_spearman_p_value': 0.08680990365099464, 'test_kendall_r': 0.33740450153327395, 'test_kendall_p_value': 0.04833132364866384, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 730, 'regressor__learning_rate': 0.048400449689015135, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2993017235639479, 'test_rmse': 0.43060947203484307, 'test_r2': -0.31569489764317615, 'test_pearson_r': array([0.2401245]), 'test_pearson_p_value': array([0.32207231]), 'test_spearman_r': 0.2665515805705117, 'test_spearman_p_value': 0.26998277012812033, 'test_kendall_r': 0.24100321538090996, 'test_kendall_p_value': 0.15844614150199832, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 373, 'regressor__learning_rate': 0.059825630356352875, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.24318196667461817, 'test_rmse': 0.36671493396866034, 'test_r2': 0.04578722664518187, 'test_pearson_r': array([0.47390791]), 'test_pearson_p_value': array([0.04038637]), 'test_spearman_r': 0.41424818132561253, 'test_spearman_p_value': 0.07785103525006964, 'test_kendall_r': 0.35714918424652464, 'test_kendall_p_value': 0.03513282141572034, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.057929676001226026, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.27391952978423867, 'test_rmse': 0.40675643659661737, 'test_r2': -0.17396973562352702, 'test_pearson_r': array([0.33998816]), 'test_pearson_p_value': array([0.15438692]), 'test_spearman_r': 0.2990326574325016, 'test_spearman_p_value': 0.21362389803484483, 'test_kendall_r': 0.2976243202054373, 'test_kendall_p_value': 0.07914189693581544, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.024788560679862345, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([10.37598014, 10.9821229 , 10.45657206, 10.18267965,  9.97922277,
       11.05743194, 10.84591174, 11.13342738, 10.6219945 , 10.32084084,
       10.7992475 ,  9.79951429, 10.54310489,  9.3987658 ]), 'score_time': array([0.17472839, 0.17046475, 0.16806483, 0.17861104, 0.16810918,
       0.17486763, 0.17029953, 0.17059374, 0.18341494, 0.18253207,
       0.17884755, 0.17206287, 0.17931032, 0.16851258]), 'test_pearson_r': array([0.97039888, 0.99289865, 0.99132174, 0.97696703, 0.94180006,
       0.98759796, 0.74073471, 0.97496655, 0.9693648 , 0.97515857,
       0.9808489 , 0.97635903, 0.91446355, 0.95446893]), 'test_pearson_p': array([-6.33586613e-12, -3.67387724e-17, -2.00954443e-16, -7.67958181e-13,
       -1.79921671e-09, -4.12724129e-15, -2.86069058e-04, -7.16976382e-12,
       -3.54363772e-11, -6.74550204e-12, -8.56859571e-13, -4.55578410e-12,
       -1.09875930e-07, -8.04822885e-10]), 'test_spearman_r': array([0.89473684, 0.97805092, 0.98070175, 0.96140351, 0.96621334,
       0.97674428, 0.77894737, 0.95557902, 0.97004184, 0.93188854,
       0.97263823, 0.92307705, 0.88946328, 0.93959744]), 'test_spearman_p': array([-2.35296190e-07, -5.11677137e-13, -1.72884140e-13, -5.86202817e-11,
       -1.92238776e-11, -8.32796316e-13, -8.50353921e-05, -6.62934630e-10,
       -2.96982597e-11, -1.87828793e-08, -1.44981731e-11, -4.83257537e-08,
       -7.88053542e-07, -7.36446168e-09]), 'test_kendall_r': array([0.80116959, 0.9       , 0.91812865, 0.89473684, 0.86803892,
       0.91495995, 0.77777778, 0.84870258, 0.87501894, 0.83006536,
       0.89180807, 0.81311912, 0.7697535 , 0.81311912]), 'test_kendall_p': array([-4.67377304e-08, -8.35279080e-08, -7.20796807e-12, -6.63913300e-11,
       -2.20656528e-07, -4.73213851e-08, -1.64978258e-07, -9.91848331e-07,
       -4.53574602e-07, -2.71335027e-08, -2.53540670e-07, -2.59896801e-06,
       -9.07720685e-06, -2.59896801e-06]), 'test_rmse': array([-0.15454292, -0.09335914, -0.0944241 , -0.15261807, -0.18365808,
       -0.10276845, -0.47262184, -0.15122107, -0.16288976, -0.12826514,
       -0.12444228, -0.13597599, -0.2479727 , -0.14360943]), 'test_mae': array([-0.10462411, -0.06422419, -0.06528383, -0.09767243, -0.13885502,
       -0.065541  , -0.18952104, -0.0789255 , -0.10331974, -0.09439115,
       -0.09187114, -0.10193717, -0.12894433, -0.1060804 ]), 'test_r2': array([0.93084602, 0.98066607, 0.98129375, 0.9492458 , 0.88053048,
       0.97398824, 0.51876039, 0.94509252, 0.93424016, 0.95045131,
       0.95963008, 0.9441134 , 0.81896517, 0.90119751]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 402, 'regressor__learning_rate': 0.09901740543431413, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([16.73962212, 16.51510501, 16.49989486, 16.39847064, 17.11697602,
       17.06528831, 16.53061557, 16.5749042 , 16.65728116, 17.07368517,
       15.83376884, 16.69963264, 15.58384848, 15.55898929]), 'score_time': array([0.24531722, 0.24507403, 0.25934362, 0.2579093 , 0.26018715,
       0.24284649, 0.26045537, 0.2423048 , 0.23783207, 0.24093628,
       0.23938489, 0.24129844, 0.24433446, 0.26258063]), 'test_pearson_r': array([0.9740324 , 0.98850293, 0.99137816, 0.98847212, 0.95476454,
       0.69071723, 0.98803078, 0.95704021, 0.96987584, 0.92970729,
       0.99103304, 0.91526483, 0.99174251, 0.94218845]), 'test_pearson_p': array([-2.10724082e-12, -2.17413333e-15, -1.90151997e-16, -2.22392270e-15,
       -2.20860322e-10, -1.05983350e-03, -3.05605795e-15, -5.09651508e-10,
       -3.10243476e-11, -2.40021577e-08, -2.04343916e-15, -1.02170189e-07,
       -1.05912868e-15, -5.22881313e-09]), 'test_spearman_r': array([0.9429324 , 0.95919272, 0.98244074, 0.93859649, 0.95041694,
       0.76491228, 0.99473684, 0.9287195 , 0.9086217 , 0.91219057,
       0.99122367, 0.93188854, 0.98348813, 0.88177606]), 'test_spearman_p': array([-1.52842515e-09, -9.34084168e-11, -7.79310290e-14, -2.80606429e-09,
       -4.74698356e-10, -1.36233942e-04, -2.89737181e-18, -2.67521689e-08,
       -1.82914385e-07, -1.34535861e-07, -1.72171485e-15, -1.87828793e-08,
       -2.63828912e-13, -1.31598583e-06]), 'test_kendall_r': array([0.82941176, 0.84457841, 0.93529412, 0.8245614 , 0.84457841,
       0.64912281, 0.96491228, 0.7697535 , 0.76065983, 0.78291168,
       0.94426737, 0.84313725, 0.92156863, 0.76065983]), 'test_kendall_p': array([-7.85254763e-07, -4.63085373e-07, -2.55460982e-08, -1.17067315e-08,
       -4.63085373e-07, -3.57225177e-05, -2.15380643e-14, -9.07720685e-06,
       -1.09773191e-05, -6.36380428e-06, -4.80698932e-08, -1.22726897e-08,
       -2.92550870e-11, -1.09773191e-05]), 'test_rmse': array([-0.114362  , -0.11298917, -0.08421799, -0.09831667, -0.21325604,
       -0.51597432, -0.10776524, -0.15924802, -0.14790578, -0.23396546,
       -0.09751043, -0.21261393, -0.08522402, -0.2270344 ]), 'test_mae': array([-0.06994358, -0.08675285, -0.0742458 , -0.0675244 , -0.13066324,
       -0.24831676, -0.07197182, -0.11519808, -0.11700404, -0.13221429,
       -0.06495874, -0.14628565, -0.06608142, -0.12803178]), 'test_r2': array([0.94835864, 0.97063966, 0.98257501, 0.97178135, 0.9093134 ,
       0.40422602, 0.97449501, 0.89391423, 0.93927746, 0.85530602,
       0.97720849, 0.83556164, 0.98187802, 0.81691311]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 599, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([58.25534868, 57.31221294, 57.7916646 , 56.86554837, 58.25518131,
       57.34877086, 60.97175312, 57.14871097, 57.5170908 , 59.18894863,
       59.16479993, 58.72407269, 58.64239883, 58.29260635]), 'score_time': array([0.75380015, 0.75382543, 0.75704455, 0.80523968, 0.77723193,
       0.73894954, 0.80633879, 0.75872731, 0.75727034, 0.76693273,
       0.7680161 , 0.79670095, 0.75292993, 0.73728895]), 'test_pearson_r': array([0.95034603, 0.97250098, 0.97368658, 0.96809489, 0.94635728,
       0.9719423 , 0.97355685, 0.82577096, 0.98809676, 0.93543933,
       0.98982476, 0.96614267, 0.6708762 , 0.99178597]), 'test_pearson_p': array([-4.80383097e-10, -3.41179482e-12, -2.35526765e-12, -1.18877058e-11,
       -9.13863502e-10, -4.04022027e-12, -2.45473684e-12, -2.43277645e-05,
       -1.95226395e-14, -1.23787499e-08, -5.59654462e-15, -7.80716169e-11,
       -2.30635899e-03, -1.01548295e-15]), 'test_spearman_r': array([0.94690663, 0.95041694, 0.97894737, 0.96140351, 0.9319878 ,
       0.96445819, 0.97674428, 0.79360165, 0.97830631, 0.91950464,
       0.98915862, 0.91615349, 0.66357069, 0.98140548]), 'test_spearman_p': array([-8.38882187e-10, -4.74698356e-10, -3.60064188e-13, -5.86202817e-11,
       -6.53956231e-09, -2.93899065e-11, -8.32796316e-13, -8.46599736e-05,
       -2.30443206e-12, -6.86926274e-08, -9.27540331e-15, -9.41755501e-08,
       -2.67798397e-03, -6.77950044e-13]), 'test_kendall_r': array([0.83284816, 0.84457841, 0.90643275, 0.89473684, 0.80938764,
       0.89149943, 0.90322969, 0.66013072, 0.91449348, 0.79084967,
       0.94426737, 0.81074309, 0.62091503, 0.92765165]), 'test_kendall_p': array([-6.66104086e-07, -4.63085373e-07, -2.27996852e-11, -6.63913300e-11,
       -1.35872010e-06, -1.03161918e-07, -7.00361385e-08, -4.59206923e-05,
       -1.34526112e-07, -2.29491225e-07, -4.80698932e-08, -3.48443378e-06,
       -1.54908277e-04, -8.87180979e-08]), 'test_rmse': array([-0.20300155, -0.16199024, -0.17380247, -0.16826136, -0.1633564 ,
       -0.17033605, -0.11884487, -0.25327279, -0.10804031, -0.20528394,
       -0.10296467, -0.17804869, -0.52356755, -0.08786482]), 'test_mae': array([-0.11951248, -0.10680742, -0.11850523, -0.10129535, -0.1114877 ,
       -0.11820668, -0.07711324, -0.17399594, -0.07568636, -0.13950124,
       -0.06789475, -0.09411008, -0.20772682, -0.06927935]), 'test_r2': array([0.90095408, 0.93801978, 0.9425001 , 0.93490699, 0.87138539,
       0.93634521, 0.94775909, 0.66447743, 0.97345   , 0.86747505,
       0.9779014 , 0.92722547, 0.37382   , 0.98022794]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([15.63278031, 14.56230712, 15.18706489, 15.22275496, 16.41025162,
       13.02351403, 15.93857741, 16.19685674, 15.46017075, 15.20754766,
       16.78899264, 14.66910005, 15.07031941, 15.78490829]), 'score_time': array([0.22627878, 0.23536897, 0.22388053, 0.23614049, 0.23534393,
       0.22868991, 0.23492599, 0.23790526, 0.2367487 , 0.25043583,
       0.22445631, 0.23232913, 0.23566842, 0.2304976 ]), 'test_pearson_r': array([0.99287322, 0.98831137, 0.97970583, 0.73941619, 0.87417695,
       0.97369145, 0.98397116, 0.98095259, 0.59715741, 0.97674065,
       0.96831453, 0.96044812, 0.96486984, 0.96756206]), 'test_pearson_p': array([-3.78686332e-17, -2.50037107e-15, -2.64269521e-13, -2.97199131e-04,
       -9.97172262e-07, -2.35160801e-12, -3.60845682e-14, -8.20708235e-13,
       -8.87971277e-03, -4.00444265e-12, -4.62517215e-11, -2.65948143e-10,
       -1.04464426e-10, -5.56727341e-11]), 'test_spearman_r': array([0.99078139, 0.98070175, 0.97849944, 0.81986078, 0.88596491,
       0.95614035, 0.9837649 , 0.95971126, 0.66907598, 0.93601651,
       0.9251421 , 0.88028896, 0.93188854, 0.9628483 ]), 'test_spearman_p': array([-3.35186168e-16, -1.72884140e-13, -4.29972653e-13, -1.73386634e-05,
       -4.50511072e-07, -1.70664316e-10, -4.01991254e-14, -3.07551300e-10,
       -2.39372581e-03, -1.15418850e-08, -3.91301914e-08, -1.44733680e-06,
       -1.87828793e-08, -1.62399435e-10]), 'test_kendall_r': array([0.94705882, 0.90643275, 0.9266902 , 0.70116558, 0.78947368,
       0.84795322, 0.9266902 , 0.84870258, 0.60328193, 0.83006536,
       0.83934877, 0.79084967, 0.80392157, 0.88235294]), 'test_kendall_p': array([-1.70481486e-08, -2.27996852e-11, -3.18217344e-08, -4.08216850e-05,
       -8.90628326e-08, -2.53233265e-09, -3.18217344e-08, -9.91848331e-07,
       -4.88013116e-04, -2.71335027e-08, -1.22329014e-06, -2.29491225e-07,
       -1.16879681e-07, -8.28241250e-10]), 'test_rmse': array([-0.09341562, -0.08416525, -0.12607219, -0.39508113, -0.2816273 ,
       -0.17746955, -0.12295247, -0.10830307, -0.50651138, -0.1299139 ,
       -0.12082284, -0.20660249, -0.15157124, -0.18559208]), 'test_mae': array([-0.0711917 , -0.05897593, -0.08418565, -0.17523292, -0.16934962,
       -0.11044022, -0.09790629, -0.08037945, -0.22397992, -0.09908649,
       -0.06759726, -0.12081542, -0.115299  , -0.13340972]), 'test_r2': array([0.97906794, 0.97485202, 0.95626837, 0.40921794, 0.76215126,
       0.94152191, 0.96568953, 0.96185413, 0.26593258, 0.95067366,
       0.93566043, 0.91678599, 0.93063819, 0.93442519]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 566, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([48.60102296, 56.91151953, 50.30763769, 50.60062575, 52.67381763,
       49.99649096, 56.18234873, 50.73527694, 57.78206134, 56.45272589,
       52.79261732, 51.37016678, 53.44378114, 57.467448  ]), 'score_time': array([0.75245714, 0.74192476, 0.80198956, 0.76787257, 0.75846052,
       0.77191591, 0.75433636, 0.7802422 , 0.78339577, 0.81605768,
       0.76953173, 0.76439929, 0.72948861, 0.76025057]), 'test_pearson_r': array([0.96553642, 0.9612341 , 0.98158085, 0.97056835, 0.93374022,
       0.98603642, 0.98530832, 0.70396397, 0.95419815, 0.96575815,
       0.94520646, 0.96387606, 0.69538136, 0.99165962]), 'test_pearson_p': array([-2.27022726e-11, -6.08084978e-11, -1.16663693e-13, -6.03756291e-12,
       -5.27001686e-09, -1.12500484e-14, -1.72870796e-14, -1.11161295e-03,
       -8.43196572e-10, -8.53497430e-11, -3.43791176e-09, -1.30174244e-10,
       -1.35536194e-03, -1.14693507e-15]), 'test_spearman_r': array([0.89473684, 0.91740036, 0.94422495, 0.95655999, 0.93508772,
       0.96491228, 0.94561404, 0.58367769, 0.92458678, 0.9411162 ,
       0.9163228 , 0.96904025, 0.79566563, 0.97729618]), 'test_spearman_p': array([-2.35296190e-07, -3.24291961e-08, -1.26357377e-09, -1.57498426e-10,
       -4.44614837e-09, -2.63877371e-11, -1.02463740e-09, -1.09895557e-02,
       -4.14396940e-08, -6.03626232e-09, -9.27154202e-08, -3.85140601e-11,
       -7.86687184e-05, -3.30605345e-12]), 'test_kendall_r': array([0.76608187, 0.8023913 , 0.82006256, 0.85630867, 0.80116959,
       0.87134503, 0.84795322, 0.50657895, 0.79605263, 0.82238622,
       0.84870258, 0.88235294, 0.75163399, 0.90849673]), 'test_kendall_p': array([-2.97692997e-07, -1.85371850e-06, -1.10523131e-06, -3.20420144e-07,
       -4.67377304e-08, -4.58322529e-10, -2.53233265e-09, -3.49175624e-03,
       -4.43734615e-06, -2.12120439e-06, -9.91848331e-07, -8.28241250e-10,
       -1.44239308e-06, -9.76656516e-11]), 'test_rmse': array([-0.15643576, -0.17597729, -0.10251886, -0.15179485, -0.23560765,
       -0.11607846, -0.11644291, -0.37159266, -0.24219958, -0.18494227,
       -0.16004861, -0.15977822, -0.48214518, -0.10531361]), 'test_mae': array([-0.09932115, -0.12216755, -0.08071339, -0.10895661, -0.15070355,
       -0.08365532, -0.08777716, -0.20495387, -0.14482966, -0.13856286,
       -0.08903048, -0.1219209 , -0.20296424, -0.08267197]), 'test_r2': array([0.93105191, 0.91886738, 0.95684311, 0.92537655, 0.85704196,
       0.97209921, 0.9560454 , 0.33896902, 0.89390478, 0.92605972,
       0.89252369, 0.92897166, 0.3967903 , 0.97307168]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.016514366626174826, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([46.96788287, 57.4066236 , 57.53395247, 57.13491559, 51.60020161,
       52.12626576, 52.09963965, 52.87957907, 57.88324952, 53.49245524,
       56.88035655, 52.18296385, 48.92143202, 59.55302835]), 'score_time': array([0.75593209, 0.73350859, 0.76588058, 0.76888752, 0.82194448,
       0.75521731, 0.77522373, 0.77773952, 0.75777006, 0.80190253,
       0.76988125, 0.75934553, 0.75530481, 0.81507254]), 'test_pearson_r': array([0.89178222, 0.88026126, 0.98723425, 0.99010405, 0.94178987,
       0.98867601, 0.98471993, 0.96644169, 0.93312175, 0.98210625,
       0.97543191, 0.73306739, 0.98104321, 0.96565384]), 'test_pearson_p': array([-2.94645828e-07, -6.68561426e-07, -5.27022280e-15, -6.10979989e-16,
       -1.80183434e-09, -1.91224335e-15, -2.40888125e-14, -7.27916614e-11,
       -1.62927188e-08, -4.99670207e-13, -6.17940393e-12, -5.37990465e-04,
       -7.90213035e-13, -8.74234059e-11]), 'test_spearman_r': array([0.86666667, 0.85425845, 0.96751574, 0.98945671, 0.97719298,
       0.96842105, 0.98200975, 0.82705225, 0.9504644 , 0.93546734,
       0.98968008, 0.80681861, 0.96537584, 0.96078431]), 'test_spearman_p': array([-1.58937749e-06, -3.23984540e-06, -1.38245687e-11, -1.04468862e-15,
       -7.06769745e-13, -1.09055587e-11, -9.56293130e-14, -2.30313770e-05,
       -1.55976502e-09, -1.23369500e-08, -6.26289422e-15, -5.21417546e-05,
       -9.31654882e-11, -2.48656703e-10]), 'test_kendall_r': array([0.73099415, 0.65295247, 0.87648575, 0.94398977, 0.90643275,
       0.87134503, 0.9266902 , 0.65574123, 0.85620915, 0.83934877,
       0.94771242, 0.79606986, 0.87132984, 0.89542484]), 'test_kendall_p': array([-1.52091530e-06, -1.01006864e-04, -1.79656543e-07, -2.01982025e-08,
       -2.27996852e-11, -4.58322529e-10, -3.18217344e-08, -1.50350254e-04,
       -5.28843419e-09, -1.22329014e-06, -1.81026609e-12, -4.43688739e-06,
       -5.42460793e-07, -2.96242626e-10]), 'test_rmse': array([-0.22580548, -0.22658887, -0.1484444 , -0.08975013, -0.18617532,
       -0.10956307, -0.11492202, -0.1158886 , -0.22306875, -0.13562648,
       -0.14537969, -0.4900219 , -0.15114279, -0.22163373]), 'test_mae': array([-0.12358879, -0.16418702, -0.11349834, -0.0645197 , -0.09930893,
       -0.07405614, -0.07580773, -0.08186887, -0.12078705, -0.10520875,
       -0.10213121, -0.1950275 , -0.12185404, -0.1647305 ]), 'test_r2': array([0.77922046, 0.75792214, 0.96068786, 0.97591449, 0.87055979,
       0.97681734, 0.96926477, 0.91669671, 0.8481704 , 0.96149435,
       0.94475945, 0.49525562, 0.94136283, 0.90650329]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.02184002915033903, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([57.96117234, 56.81004715, 58.02818441, 50.67978168, 55.28732324,
       54.78188419, 50.43974304, 54.86190844, 59.58453226, 59.21462226,
       56.36212516, 55.32697701, 57.40557814, 54.84836054]), 'score_time': array([0.77064037, 0.76067686, 0.75802684, 0.74547315, 0.78443837,
       0.74911046, 0.7555263 , 0.77198362, 0.7302618 , 0.72543907,
       0.75577784, 0.79708147, 0.76800203, 0.77314019]), 'test_pearson_r': array([0.9777854 , 0.71763421, 0.98101221, 0.95337047, 0.91468736,
       0.98892184, 0.96634219, 0.95507265, 0.95397784, 0.9838051 ,
       0.97912564, 0.93934059, 0.97729081, 0.99510667]), 'test_pearson_p': array([-5.66231917e-13, -5.41635293e-04, -1.50779386e-13, -2.84508119e-10,
       -4.22805530e-08, -1.58811990e-15, -1.86177527e-11, -7.24695562e-10,
       -8.75583576e-10, -2.26157533e-13, -1.69792193e-12, -7.61250678e-09,
       -3.31226120e-12, -1.62764411e-17]), 'test_spearman_r': array([0.96621334, 0.7205635 , 0.98638645, 0.94515147, 0.92105263,
       0.98727522, 0.93988601, 0.91942198, 0.921012  , 0.98450466,
       0.98089843, 0.95665635, 0.95665635, 0.97316821]), 'test_spearman_p': array([-1.92238776e-11, -5.01222852e-04, -9.07717203e-15, -1.09937206e-09,
       -2.23613329e-08, -5.12890798e-15, -2.35329013e-09, -6.92406015e-08,
       -5.93386907e-08, -1.59200608e-13, -8.39423191e-13, -5.46578066e-10,
       -5.46578066e-10, -1.24188235e-11]), 'test_kendall_r': array([0.89149943, 0.63719309, 0.94398977, 0.85630867, 0.80116959,
       0.9266902 , 0.80938764, 0.80922804, 0.8000043 , 0.94080983,
       0.91803772, 0.86928105, 0.85620915, 0.90849673]), 'test_kendall_p': array([-1.03161918e-07, -1.52508316e-04, -2.04681459e-08, -3.20420144e-07,
       -4.67377304e-08, -3.18217344e-08, -1.35872010e-06, -3.07634090e-06,
       -3.75687779e-06, -5.81823612e-08, -1.11636054e-07, -2.15825858e-09,
       -5.28843419e-09, -9.76656516e-11]), 'test_rmse': array([-0.13613298, -0.50606677, -0.13492871, -0.16695257, -0.1935801 ,
       -0.10405079, -0.13362995, -0.19083913, -0.16132371, -0.12707252,
       -0.13890602, -0.23605284, -0.11566585, -0.07687659]), 'test_mae': array([-0.08628805, -0.19700948, -0.09601022, -0.09786465, -0.12335958,
       -0.05861727, -0.11089317, -0.12735709, -0.11564825, -0.09492383,
       -0.09959728, -0.14889196, -0.08768843, -0.05688442]), 'test_r2': array([0.95291233, 0.45197058, 0.95994415, 0.90570399, 0.83463794,
       0.97473578, 0.93140265, 0.9031638 , 0.90753577, 0.9574482 ,
       0.95578371, 0.87899532, 0.95201419, 0.98782876]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.052220183182120176, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 29, 6: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.6888322590226557, 'test_rmse': 0.8073760662652458, 'test_r2': -0.6320005067392742, 'test_pearson_r': array([-0.10671843]), 'test_pearson_p_value': array([0.36547305]), 'test_spearman_r': -0.08631607097384009, 'test_spearman_p_value': 0.4646300568757773, 'test_kendall_r': -0.048681002932347096, 'test_kendall_p_value': 0.5408759948506432, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 148, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7099741821175716, 'test_rmse': 0.8547253294930462, 'test_r2': -0.8290336505383504, 'test_pearson_r': array([-0.24420883]), 'test_pearson_p_value': array([0.03600595]), 'test_spearman_r': -0.33958393842672585, 'test_spearman_p_value': 0.003076624941981583, 'test_kendall_r': -0.19360917960116672, 'test_kendall_p_value': 0.015017703340999533, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 397, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7795353667145859, 'test_rmse': 0.9085399907040964, 'test_r2': -1.0666010389555645, 'test_pearson_r': array([-0.3466875]), 'test_pearson_p_value': array([0.00247821]), 'test_spearman_r': -0.43369202515097793, 'test_spearman_p_value': 0.00011334991813044891, 'test_kendall_r': -0.30869346561529126, 'test_kendall_p_value': 0.00010492897194407878, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1246, 'regressor__learning_rate': 0.07352481813242628, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7274747683973548, 'test_rmse': 0.8488183863756582, 'test_r2': -0.8038403760441502, 'test_pearson_r': array([-0.25084931]), 'test_pearson_p_value': array([0.03110346]), 'test_spearman_r': -0.38409974896578913, 'test_spearman_p_value': 0.000728851154318442, 'test_kendall_r': -0.22301080261780132, 'test_kendall_p_value': 0.005164134646246591, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 691, 'regressor__learning_rate': 0.0681730253444973, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.6973956375955129, 'test_rmse': 0.80536649038216, 'test_r2': -0.6238864506901967, 'test_pearson_r': array([-0.19753624]), 'test_pearson_p_value': array([0.0916017]), 'test_spearman_r': -0.3502984754127598, 'test_spearman_p_value': 0.0022159358897680097, 'test_kendall_r': -0.1847593984019811, 'test_kendall_p_value': 0.02033955583581192, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1123, 'regressor__learning_rate': 0.05913781436124809, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.6907563670695661, 'test_rmse': 0.8417834174184865, 'test_r2': -0.7740639849192807, 'test_pearson_r': array([-0.24296854]), 'test_pearson_p_value': array([0.03698961]), 'test_spearman_r': -0.30196392156024077, 'test_spearman_p_value': 0.008930317143766343, 'test_kendall_r': -0.15621538542463667, 'test_kendall_p_value': 0.04941642787079013, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1347, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.8058431895435557, 'test_rmse': 0.9292838471820137, 'test_r2': -1.1620479606650438, 'test_pearson_r': array([-0.34993075]), 'test_pearson_p_value': array([0.00224146]), 'test_spearman_r': -0.438534000576343, 'test_spearman_p_value': 9.302663298928341e-05, 'test_kendall_r': -0.2980702980807986, 'test_kendall_p_value': 0.0001782398699921716, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1032, 'regressor__learning_rate': 0.05803047808597792, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([51.43339801, 52.49351239, 50.93581033, 51.35968018]), 'score_time': array([0.96354508, 0.91685534, 0.9581666 , 0.92528749]), 'test_pearson_r': array([0.95342957, 0.88388783, 0.95813856, 0.95780926]), 'test_pearson_p': array([-1.68342875e-34, -1.82045653e-22, -6.29124993e-36, -2.81007968e-35]), 'test_spearman_r': array([0.91030113, 0.9105373 , 0.95344162, 0.9391615 ]), 'test_spearman_p': array([-8.08140857e-26, -7.46454117e-26, -1.67006263e-34, -1.80266958e-30]), 'test_kendall_r': array([0.80627546, 0.82041491, 0.82742266, 0.82446636]), 'test_kendall_p': array([-2.97920696e-21, -5.01085012e-22, -2.82123607e-22, -7.40673801e-22]), 'test_rmse': array([-0.20251037, -0.30650006, -0.18084492, -0.16503041]), 'test_mae': array([-0.10584414, -0.1336013 , -0.11150336, -0.1035909 ]), 'test_r2': array([0.90536878, 0.77877817, 0.9162625 , 0.91624917]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.09820359045643907, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([50.84691286, 52.72336626, 54.72683024, 50.18945098]), 'score_time': array([0.9358747 , 0.96142364, 0.93756509, 0.92997503]), 'test_pearson_r': array([0.87451993, 0.91153488, 0.9378472 , 0.92648604]), 'test_pearson_p': array([-1.81086611e-21, -5.32455768e-26, -1.18054101e-30, -5.26317798e-28]), 'test_spearman_r': array([0.84068852, 0.92883527, 0.93274753, 0.91574127]), 'test_spearman_p': array([-1.95363101e-18, -7.32299257e-29, -1.30953048e-29, -3.07204401e-26]), 'test_kendall_r': array([0.71011347, 0.832692  , 0.7979792 , 0.8001997 ]), 'test_kendall_p': array([-8.05493489e-17, -1.38162087e-22, -7.82256560e-21, -1.06680420e-20]), 'test_rmse': array([-0.34046347, -0.28110002, -0.21296021, -0.22028479]), 'test_mae': array([-0.17132249, -0.12445293, -0.12756068, -0.12644929]), 'test_r2': array([0.69962159, 0.82703344, 0.8777574 , 0.85461338]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([50.37012005, 49.99542785, 52.69225049, 52.38681006]), 'score_time': array([0.92605925, 0.93123698, 0.9203527 , 0.9766674 ]), 'test_pearson_r': array([0.97235282, 0.9576226 , 0.91324948, 0.90513723]), 'test_pearson_p': array([-1.64571555e-41, -9.18214183e-36, -2.95130459e-26, -1.03152204e-24]), 'test_spearman_r': array([0.96500776, 0.94745124, 0.89215269, 0.92012747]), 'test_spearman_p': array([-2.46380460e-38, -6.90473705e-33, -2.02312777e-23, -6.25858532e-27]), 'test_kendall_r': array([0.85108523, 0.83225052, 0.78583659, 0.83234787]), 'test_kendall_p': array([-1.52343044e-23, -1.25135726e-22, -2.57686729e-20, -4.04230735e-22]), 'test_rmse': array([-0.16090111, -0.17975205, -0.23623954, -0.28908558]), 'test_mae': array([-0.10889432, -0.12092803, -0.12865471, -0.11799905]), 'test_r2': array([0.94035421, 0.90890557, 0.82793348, 0.81699247]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([52.16235065, 47.57854939, 51.76704168, 51.51046681]), 'score_time': array([0.96509361, 0.92701054, 0.94021106, 0.9085505 ]), 'test_pearson_r': array([0.98014216, 0.91958786, 0.85470907, 0.93435846]), 'test_pearson_p': array([-5.49262500e-46, -2.98143461e-27, -1.34121004e-19, -1.76882422e-29]), 'test_spearman_r': array([0.97535395, 0.91247241, 0.88815546, 0.92927628]), 'test_spearman_p': array([-4.61207855e-43, -3.86196398e-26, -5.98192056e-23, -1.65397018e-28]), 'test_kendall_r': array([0.8929959 , 0.80115551, 0.78370182, 0.81599228]), 'test_kendall_p': array([-1.48648046e-25, -4.44900071e-21, -3.50828547e-20, -1.73468692e-21]), 'test_rmse': array([-0.11953777, -0.26417718, -0.31840673, -0.2361402 ]), 'test_mae': array([-0.07565524, -0.13678016, -0.14396188, -0.1326865 ]), 'test_r2': array([0.95955771, 0.84013708, 0.7126871 , 0.86843771]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([32.99208474, 34.74075317, 32.79964876, 33.95748591]), 'score_time': array([0.6387496 , 0.62656379, 0.65493321, 0.64862776]), 'test_pearson_r': array([0.96842763, 0.95855421, 0.8873209 , 0.86839066]), 'test_pearson_p': array([-1.01619196e-39, -4.62324948e-36, -7.46252461e-23, -1.50133691e-20]), 'test_spearman_r': array([0.91711757, 0.95939419, 0.833337  , 0.90191634]), 'test_spearman_p': array([-7.44511471e-27, -2.45662091e-36, -7.19282868e-18, -2.76511990e-24]), 'test_kendall_r': array([0.78078806, 0.84833895, 0.74686304, 0.82762088]), 'test_kendall_p': array([-5.27811753e-20, -1.93512415e-23, -2.01871748e-18, -4.76702606e-22]), 'test_rmse': array([-0.15441762, -0.18751381, -0.31189189, -0.31612575]), 'test_mae': array([-0.10040059, -0.13080528, -0.13909818, -0.12829236]), 'test_r2': array([0.9373547 , 0.91326267, 0.75741406, 0.74170235]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1360, 'regressor__learning_rate': 0.06629909464883918, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([32.41758227, 25.45517111, 27.62077117, 25.53217387]), 'score_time': array([0.62649274, 0.61665583, 0.638237  , 0.61701894]), 'test_pearson_r': array([0.90576488, 0.97906656, 0.97052113, 0.8892772 ]), 'test_pearson_p': array([-3.56424070e-25, -2.84725948e-45, -1.20789071e-40, -9.76546941e-23]), 'test_spearman_r': array([0.91274746, 0.97072419, 0.96424201, 0.91332583]), 'test_spearman_p': array([-3.51230049e-26, -9.74508943e-41, -4.81674334e-38, -7.11320307e-26]), 'test_kendall_r': array([0.76062343, 0.85590451, 0.85438855, 0.81227538]), 'test_kendall_p': array([-4.42964405e-19, -8.61431895e-24, -1.07686675e-23, -3.64316873e-21]), 'test_rmse': array([-0.25541157, -0.13408458, -0.14819594, -0.32019109]), 'test_mae': array([-0.17314668, -0.09212412, -0.09988042, -0.1627116 ]), 'test_r2': array([0.80533886, 0.95676389, 0.93682374, 0.78131699]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1318, 'regressor__learning_rate': 0.01991222995825114, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([31.94385409, 31.15672684, 36.85940266, 36.33563733]), 'score_time': array([0.61933208, 0.64987469, 0.64167285, 0.64056063]), 'test_pearson_r': array([0.88234258, 0.94789894, 0.95215261, 0.95558796]), 'test_pearson_p': array([-2.69491074e-22, -5.30934772e-33, -3.87143474e-34, -1.33413757e-34]), 'test_spearman_r': array([0.87591179, 0.94224738, 0.94132952, 0.94888439]), 'test_spearman_p': array([-1.30251677e-21, -1.24922902e-31, -2.02439117e-31, -9.43106505e-33]), 'test_kendall_r': array([0.77021133, 0.84104134, 0.80705993, 0.82902677]), 'test_kendall_p': array([-1.87990575e-19, -4.78055371e-23, -2.97051400e-21, -4.23927237e-22]), 'test_rmse': array([-0.31542828, -0.18280745, -0.19551316, -0.19079775]), 'test_mae': array([-0.14646192, -0.1023499 , -0.1454724 , -0.11991577]), 'test_r2': array([0.77151176, 0.89588849, 0.89726252, 0.91095774]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1359, 'regressor__learning_rate': 0.0583675162648701, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n02>
Subject: Job 295216: <NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:09:31 2025
Job was executed on host(s) <8*c205n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 16:24:07 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 16:24:07 2025
Terminated at Fri Mar 14 21:57:22 2025
Results reported at Fri Mar 14 21:57:22 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM3 Mordred cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   860712.00 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.82 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              26
    Max Threads :                                29
    Run time :                                   192818 sec.
    Turnaround time :                            269271 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.err> for stderr output of this job.

